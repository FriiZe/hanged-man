version: "3.8"

services:
  traefik:
    image: traefik:2.2
    restart: on-failure
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
    ports:
      - 80:80
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  postgres:
    image: postgres:13-alpine
    restart: on-failure
    command: "-c log_statement=all"
    ports:
      - 5432:5432
    environment:
      POSTGRES_PASSWORD: eQq5m2Ic7aYLcH3JK8saxTPUBfU0SiPA6mfICuOMmfayXhjQRiZlC38dS4d4guAx
    volumes:
      - ./volumes/pgdata/:/var/lib/postgresql/data

  api:
    image: node:14-alpine
    user: 1000:1000
    command: npm run start api
    working_dir: /app
    restart: on-failure
    environment:
      PORT: 8080
      WS_PORT: 8081
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASS: eQq5m2Ic7aYLcH3JK8saxTPUBfU0SiPA6mfICuOMmfayXhjQRiZlC38dS4d4guAx
      SALT: P3XuhmQ7rBQATevCBNTyZHp0Zh2DyaCpqnQ9ROz9KIHqLKp7uhNxKxTxzh6H4W1b
      JWT_SECRET: gawR393LT0M7XiokXbZifKyraZJNf0J2BXZL4uWrs0t3Q3CgaHHHIAS5bY3uAO04
    volumes:
      - ./:/app
    depends_on:
      - traefik
      - postgres
    labels:
      - traefik.enable=true

      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.api.rule=Host(`api.hanged.man`)
      - traefik.http.services.api.loadbalancer.server.port=8080
      - traefik.http.routers.api.service=api

      - traefik.http.routers.ws.entrypoints=web
      - traefik.http.routers.ws.rule=Host(`ws.hanged.man`)
      - traefik.http.services.ws.loadbalancer.server.port=8081
      - traefik.http.routers.ws.service=ws

